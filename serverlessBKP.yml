# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: culen
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: arithmetic-calculator
# "service" is the name of this project. This will also be added to your AWS resource names.
service: arithmetic-calculator-backend

stages:
  default:
    params:
      operationTableName: "operations-table-${sls:stage}"
      recordsTableName: "records-table-${sls:stage}"
package:
  patterns:
    - '!test/**'
    - '!tests/**'
    - '!**/*.test.js'
    - '!**/*.spec.js'

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:us-east-1:010438485555:table/${param:operationTableName}
            - arn:aws:dynamodb:us-east-1:010438485555:table/${param:operationTableName}/index/TypeIndex
            - arn:aws:dynamodb:us-east-1:010438485555:table/${param:recordsTableName}
            - arn:aws:dynamodb:us-east-1:010438485555:table/${param:recordsTableName}/index/UserIdIndex
  environment:
    OPERATION_TABLE: ${param:operationTableName}
    RECORDS_TABLE: ${param:recordsTableName}

functions:
  newOperation:
    handler: src/handlers/operations.newOperation
    events:
      - httpApi:
          path: /operation
          method: POST
  updateBalance:
    handler: src/handlers/updateBalance.handler
    events:
      - httpApi:
          path: /update-balance
          method: POST
  getUserRecords:
    handler: src/handlers/getUserRecords.handler
    events:
      - httpApi:
          path: /user-records
          method: GET
  deleteRecord:
    handler: src/handlers/deleteRecord.handler
    events:
      - httpApi:
          path: /record-delete
          method: PATCH
resources:
  Resources:
    OperationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TypeIndex
            KeySchema:
              - AttributeName: type
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:operationTableName}
    RecordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: operationId
            AttributeType: S
          - AttributeName: amount
            AttributeType: N
          - AttributeName: date
            AttributeType: S
          - AttributeName: userBalance
            AttributeType: N
          - AttributeName: operationResponse
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: OperationIdIndex
            KeySchema:
              - AttributeName: operationId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdAmountIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: amount
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdDateIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdOperationIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: operationId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdUserBalanceIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: userBalance
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: userIdOperationResponseIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: operationResponse
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:recordsTableName}
plugins:
  - serverless-offline